#!/bin/bash
# set -x
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-aath}"
export AGENT_TIMEOUT=30
# Running on Windows?
if [[ "$OSTYPE" == "msys" ]]; then
  # Prefix interactive terminal commands ...
  terminalEmu="winpty"
fi

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the agents and the test harness.
          You need to do this first.
  
  rebuild - same as build, but adds the --no-cache option to force building from scratch

  run [ -a/b/m/d agent ] [ -t tags ]* - Run the tagged tests using the specified agents for Alice, Bob and Mallory.
    Select the agents for the roles of Alice (-a), Bob (-b) and Mallory (-m).
    - For all to be set to the same, use "-d" for default.
    - The value for agent must be one of: ${VALID_AGENTS}
    Use -t option(s) to indicate tests with the gives tag(s) are to be executed.

    Examples:
    $0 run -a acapy -b vcx -m vcx           - Run all the tests using the specified agents per role
    $0 run -d vcx                           - Run all tests for all features using the vcx agent in all roles
    $0 run -d acapy -t @SmokeTest -t @P1    - Run the tests tagged @SmokeTest and/or @P1 (priority 1) using all ACA-Py agents

  rebuild - Rebuild the docker images.

  dockerhost - Print the ip address of the Docker Host Adapter as it is seen by containers running in docker.
EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

function echoRed (){
  _msg="${@}"
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function initDockerBuildArgs() {
  dockerBuildArgs=""

  # HTTP proxy, prefer lower case
  if [[ "${http_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${http_proxy}"
  else
    if [[ "${HTTP_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${HTTP_PROXY}"
    fi
  fi

  # HTTPS proxy, prefer lower case
  if [[ "${https_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${https_proxy}"
  else
    if [[ "${HTTPS_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${HTTPS_PROXY}"
    fi
  fi

  echo ${dockerBuildArgs}
}

function initEnv() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift
    case "$arg" in
      *=*)
        export "${arg}"
        ;;
      *)
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  export LOG_LEVEL=${LOG_LEVEL:-info}
  export RUST_LOG=${RUST_LOG:-warning}
}

# Set of valid agents - add new agents here and in the buildImages() function
export VALID_AGENTS="acapy vcx"

# Build images -- add more backchannels here...
# TODO: Define args to build only what's needed
buildImages() {
  args=${@}

  echo "Building acapy-agent-backchannel ..."
  docker build \
    ${args} \
    $(initDockerBuildArgs) \
    -t 'acapy-agent-backchannel' \
    -f '../aries-backchannels/Dockerfile.acapy' '../aries-backchannels/'

  echo "Building  vcx-agent-backchannel ..."
  docker build \
    ${args} \
    $(initDockerBuildArgs) \
    -t 'vcx-agent-backchannel' \
    -f '../aries-backchannels/Dockerfile.vcx' '../aries-backchannels/'

  echo "Building aries-test-harness ..."
  docker build \
    ${args} \
    $(initDockerBuildArgs) \
    -t 'aries-test-harness' \
    -f '../aries-test-harness/Dockerfile.harness' '../aries-test-harness/'
}

pingAgent(){
  name=${1}
  port=${2}

  # ping agent using a backchannel-exposed api
  rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null http://localhost:${port}/agent/command/status/)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForAgent(){
  (
    name=${1}

    # Wait for agent to start ...
    local startTime=${SECONDS}
    rtnCd=0
    printf "waiting for ${name} agent to start"
    while ! pingAgent ${@}; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${AGENT_TIMEOUT} )); then
        echoRed "\nThe agent failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

runTests() {
  runArgs=${@}

  export ALICE_AGENT=${ALICE_AGENT:-${ALICE}-agent-backchannel}
  export BOB_AGENT=${BOB_AGENT:-${BOB}-agent-backchannel}
  export MALLORY_AGENT=${MALLORY_AGENT:-${MALLORY}-agent-backchannel}
  
  echo "Starting Alice Agent ..."
  docker run -d --rm --name alice_agent --expose 9020-9023 -p 9020-9023:9020-9023 -e "DOCKERHOST=${DOCKERHOST}" -e "LEDGER_URL=http://${DOCKERHOST}:9000" ${ALICE_AGENT} -p 9020 -i false >/dev/null  
  echo "Starting Bob Agent ..."
  docker run -d --rm --name bob_agent --expose 9030-9033 -p 9030-9033:9030-9033 -e "DOCKERHOST=${DOCKERHOST}" -e "LEDGER_URL=http://${DOCKERHOST}:9000" ${BOB_AGENT} -p 9030 -i false >/dev/null
  echo "Starting Mallory Agent ..."
  docker run -d --rm --name mallory_agent --expose 9040-9043 -p 9040-9043:9040-9043 -e "DOCKERHOST=${DOCKERHOST}" -e "LEDGER_URL=http://${DOCKERHOST}:9000" ${MALLORY_AGENT} -p 9040  -i false >/dev/null
 
  echo
  waitForAgent Alice 9020
  waitForAgent Bob 9030
  waitForAgent Mallory 9040

  echo
  echo
  ${terminalEmu} docker run -it --rm --network="host" aries-test-harness -k ${runArgs} -D Alice=http://0.0.0.0:9020 -D Bob=http://0.0.0.0:9030 -D Mallory=http://0.0.0.0:9040

  echo
  echo "Cleanup:"
  echo "  - Shutting down agents ..."
  printf "    - Alice: "
  docker stop alice_agent >/dev/null
  printf "Done\n"

  printf "    - Bob: "
  docker stop bob_agent >/dev/null  
  printf "Done\n"

  printf "    - Mallory: "
  docker stop mallory_agent >/dev/null  
  printf "Done\n"

}

isAgent() {
  result=false

  for agent in ${VALID_AGENTS}; do
    if [[ "${1}" == "${agent}" ]]; then
        result=true
    fi
  done

  echo $result
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Command to run must be the first argument
COMMAND=$(toLower ${1})
shift

# Handle run args separately
if [[ "${COMMAND}" == "run" ]]; then
  ALICE="none"
  BOB="none"
  MALLORY="none"
  TAGS=""

  while getopts "ha:b:c:m:d:t:" FLAG; do
    case $FLAG in
        h ) usage ;;
        : ) usage ;;
        \? ) #unrecognized option - show help
        echo -e \\n"Invalid script option: -${OPTARG}"\\n
        usage
            ;;
        a ) export ALICE=${OPTARG}
            ;;
        b ) export BOB=${OPTARG}
            ;;
        m ) export MALLORY=${OPTARG}
            ;;
        t ) export TAGS="${TAGS} --tags=${OPTARG}"
            ;;
        d )
            export ALICE=${OPTARG}
            export BOB=${OPTARG}
            export MALLORY=${OPTARG}
            ;;
    esac
  done
  shift $((OPTIND-1))

  for agent in ${ALICE} ${BOB} ${MALLORY}; do
      if [[ $(isAgent $agent) == false ]] ; then
          echo All agents Alice, Bob and Mallory must be set to one of: ${VALID_AGENTS}.
          echo Use \"${0} help\" to get more information.
          exit 1
      fi
  done

  echo Agents to be used:
  echo "  Alice - ${ALICE}"
  echo "  Bob - ${BOB}"
  echo "  Mallory - ${MALLORY}"
  if [[ "${TAGS}" ]]; then
      echo "Tags: ${TAGS}"
  else
      echo "No tags specified; all tests will be run."
  fi 
  if [[ "$@" ]]; then
      echo "Other args:  $@"
  fi
fi
echo ""

pushd ${SCRIPT_HOME} >/dev/null

case "${COMMAND}" in
  build)
      buildImages
    ;;
  rebuild)
      buildImages --no-cache
    ;;

  run)
      runTests ${TAGS} ${@}
    ;;

  dockerhost)
      echo ${DOCKERHOST}
    ;;
  *)
      usage;;
esac

popd >/dev/null
